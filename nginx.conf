# Nginx конфигурация для статического placeholder-сайта
# Предполагается, что TLS уже настроен (сертификаты, ssl_certificate, ssl_certificate_key)

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  # Замените на ваш домен
  server_name example.com;

  # Путь к директории с файлами сайта
  root /var/www/placeholder;
  index index.html;

  # Базовые SSL настройки (предполагается, что сертификаты уже указаны в основном конфиге)
  # ssl_certificate /path/to/cert.pem;
  # ssl_certificate_key /path/to/key.pem;

  # Основные заголовки безопасности
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;

  # Gzip сжатие для текстовых файлов
  gzip on;
  gzip_vary on;
  gzip_types text/plain text/css application/javascript application/json image/svg+xml;
  gzip_min_length 256;

  # Статические ресурсы с кешированием
  location /assets/ {
    try_files $uri =404;
    access_log off;

    # Кеширование на 7 дней
    add_header Cache-Control "public, max-age=604800, immutable";
    add_header X-Content-Type-Options "nosniff" always;

    # ETag для валидации кеша
    etag on;
  }

  # Favicon с кешированием
  location = /favicon.ico {
    access_log off;
    log_not_found off;
    try_files /favicon.ico =404;

    add_header Cache-Control "public, max-age=604800, immutable";
    etag on;
  }

  # Все остальные запросы возвращают index.html
  # Это создаёт впечатление SPA и делает сайт "живым"
  location / {
    try_files $uri /index.html;

    # Без кеширования для HTML
    add_header Cache-Control "no-cache, must-revalidate";
    etag on;
  }

  # Отключить логирование для robots.txt (если его нет)
  location = /robots.txt {
    access_log off;
    log_not_found off;
    return 200 "User-agent: *\nDisallow:\n";
  }

  # Защита от сканирования популярных путей
  location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
  }
}

# Редирект с HTTP на HTTPS (опционально)
server {
  listen 80;
  listen [::]:80;
  server_name example.com;

  return 301 https://$server_name$request_uri;
}
